{"name":"Witek-MVC","tagline":"Simple MVC for node express","body":"Witek-MVC\r\n=====\r\n\r\n### Simple MVC for node and express\r\n\r\nWitek has two functions - he initialise controllers and load config files.\r\n\r\n### Installation\r\n\r\n    $ npm install witek --save\r\n\r\n(`--save` automatically writes to your `package.json` file, tell your friends)\r\n\r\n### Start\r\n\r\nTraditional `app.js` is used as a starting point of the app, but anything what is required is to tell Witek to load config files.\r\n\r\n    var app = require('express')();\r\n    require('witek').load(app, __dirname + '/config');\r\n\r\n### Config load\r\n\r\nConfig structure is based on locomotivejs framework. Witek expects to have config folder strucuture as folows:\r\n\r\n     # config\r\n       # enfironment\r\n          - all.js\r\n          - development.js\r\n          - stage.js\r\n          - live.js\r\n       # initilizers\r\n          - 01_view_engine.js\r\n          - 02_auth.js\r\n          - 10_controllers.js\r\n          - 99_last.js\r\n\r\nAt first it loads enviroment depend file from `environment` folder, then `all.js` file is loaded. These files are good place to set express variables.\r\n\r\n    /** This is the content of development.js file */\r\n    module.exports = function(app) {\r\n        app.set('mongodb-uri', 'mongodb://localhost:27017/WitekDB');       \r\n    };\r\n    \r\nAfter loading enviroment depended configs, initilizers are loaded (in alphabetical order).\r\n\r\n    /* Content of 01_view_engine.js */\r\n    var ejslocals = require('ejs-locals');\r\n    module.exports = function(app) {\r\n        app.set('views', __dirname + '/../../views');\r\n        app.set('view engine', 'ejs');\r\n        app.engine('ejs', ejslocals);\r\n    };\r\n    \r\n### Controllers load\r\n\r\nTo load controllers one of initializers can be used. Here `10_controllers.js`:\r\n\r\n    var witek = require('witek');\r\n    module.exports = function(app) {\r\n        witek.controllers(app, {\r\n            controllers: app.get(__dirname + '/../../controllers'),\r\n            viewSuffix: 'html.ejs'\r\n        });\r\n    };\r\n    \r\n    \r\n### Controllers description\r\n\r\nController should be simple JavaScript object, it's functions will be automatically mapped to url. Let's say we have controller with name `example_controller.js` action below - \r\n\r\n    exports.actions = {\r\n       'example_action': function(req, res, next) { }; \r\n    };\r\n    \r\nwill be mapped to GET http://yourapphost/example_controller/example_action\r\n\r\n#### REST actions\r\n\r\nWitek define 7 default actions which are treated as default REST actions. Name of controller is `albums.js`.\r\n\r\n    /** This is the source of albums.js controller */\r\n    exports.actions = {\r\n       'index': function(){},  // This will be mapped to GET http://yourapphost/albums\r\n       'show': function(){},   // GET    http://yourapphost/albums/:id\r\n       'new': function(){},    // GET    http://yourapphost/albums/new\r\n       'create': function(){}, // POST   http://yourapphost/albums\r\n       'edit': function(){},   // GET    http://yourapphost/albums/:id/edit\r\n       'update': function(){}, // PUT    http://yourapphost/albums/:id\r\n       'del': function(){},    // DELETE http://yourapphost/albums/:id\r\n    };\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}